
import time
import timeit
from typing import List, Set
from dataclasses import dataclass

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–µ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
@dataclass
class Activity:
    start: int
    finish: int
    
    def __eq__(self, other):
        if not isinstance(other, Activity):
            return False
        return self.start == other.start and self.finish == other.finish
    
    def __hash__(self):
        return hash((self.start, self.finish))
    
    def __repr__(self):
        return f"({self.start}, {self.finish})"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
def to_set(activities: List[Activity]) -> Set[Activity]:
    return set(activities)

# –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_max_activities(activities: List[Activity]) -> List[Activity]:
    """
    –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ 
    –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.
    """
    if not activities:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    sorted_activities = sorted(activities, key=lambda x: x.finish)
    
    result = []
    current_finish = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º, –¥–æ–±–∞–≤–ª—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for activity in sorted_activities:
        if activity.start >= current_finish:
            result.append(activity)
            current_finish = activity.finish
    
    return result

# –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤)
def get_max_activities_brute_force(activities: List[Activity]) -> List[Activity]:
    """
    –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∂–∞–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
    """
    n = len(activities)
    max_subset = []
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    for mask in range(1 << n):
        subset = []
        compatible = True

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        for i in range(n):
            if mask & (1 << i):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                if subset and subset[-1].finish > activities[i].start:
                    compatible = False
                    break
                subset.append(activities[i])

        # –ï—Å–ª–∏ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if compatible and len(subset) > len(max_subset):
            max_subset = subset

    return max_subset

def measure_time(func, *args, number=1000):
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    return timeit.timeit(lambda: func(*args), number=number) / number

# –¢–µ—Å—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    
    #print("Running tests...")
    
    # TEST_CASE("Empty", "factivity!")
    def test_empty():
        I = []
        result = get_max_activities(I)
        assert to_set(result) == to_set(I), f"Empty test failed: {result}"
        #print("‚úì Empty test passed")
    
    # TEST_CASE("one activity", "factivity!")
    def test_one_activity():
        I = [Activity(2, 3)]
        result = get_max_activities(I)
        assert to_set(result) == to_set(I), f"One activity test failed: {result}"
        #print("‚úì One activity test passed")
    
    # TEST_CASE("two compatibles", "factivity!")
    def test_two_compatibles():
        I = [Activity(3, 4), Activity(2, 3)]
        result = get_max_activities(I)
        expected = [Activity(2, 3), Activity(3, 4)]
        assert to_set(result) == to_set(expected), f"Two compatibles test failed: {result}"
        #print("‚úì Two compatibles test passed")
    
    # TEST_CASE("two overlaps", "factivity!")
    def test_two_overlaps():
        I = [Activity(2, 5), Activity(3, 4)]
        result = get_max_activities(I)
        expected1 = [Activity(2, 5)]
        expected2 = [Activity(3, 4)]
        assert (to_set(result) == to_set(expected1) or 
                to_set(result) == to_set(expected2)), f"Two overlaps test failed: {result}"
        #print("‚úì Two overlaps test passed")
    
    # TEST_CASE("two incompatibles", "factivity!")
    def test_two_incompatibles():
        I = [Activity(3, 6), Activity(2, 5)]
        result = get_max_activities(I)
        expected1 = [Activity(2, 5)]
        expected2 = [Activity(3, 6)]
        assert (to_set(result) == to_set(expected1) or 
                to_set(result) == to_set(expected2)), f"Two incompatibles test failed: {result}"
        #print("‚úì Two incompatibles test passed")
    
    # TEST_CASE("three activities", "factivity!")
    def test_three_activities():
        I = [Activity(2, 6), Activity(1, 4), Activity(5, 8)]
        result = get_max_activities(I)
        expected = [Activity(1, 4), Activity(5, 8)]
        assert to_set(result) == to_set(expected), f"Three activities test failed: {result}"
        #print("‚úì Three activities test passed")
    
    # TEST_CASE("Four activities", "factivity!")
    def test_four_activities():
        I = [Activity(2, 6), Activity(1, 4), Activity(7, 10), Activity(5, 8)]
        result = get_max_activities(I)
        expected1 = [Activity(1, 4), Activity(5, 8)]
        expected2 = [Activity(2, 6), Activity(7, 10)]
        assert (to_set(result) == to_set(expected1) or 
                to_set(result) == to_set(expected2)), f"Four activities test failed: {result}"
        #print("‚úì Four activities test passed")
    
    # TEST_CASE("Five activities", "factivity!")
    def test_five_activities():
        I = [Activity(2, 6), Activity(1, 4), Activity(7, 10), Activity(5, 8), Activity(9, 12)]
        result = get_max_activities(I)
        expected = [Activity(1, 4), Activity(5, 8), Activity(9, 12)]
        assert to_set(result) == to_set(expected), f"Five activities test failed: {result}"
        #print("‚úì Five activities test passed")
    
    # TEST_CASE("Big one", "factivity!")
    def test_big_one():
        I = [
            Activity(3, 5), Activity(1, 4), Activity(5, 7), Activity(0, 6),
            Activity(3, 9), Activity(5, 9), Activity(0, 11), Activity(4, 10),
            Activity(8, 12), Activity(2, 14), Activity(12, 16)
        ]
        result = get_max_activities(I)
        expected1 = [Activity(1, 4), Activity(5, 7), Activity(8, 12), Activity(12, 16)]
        expected2 = [Activity(3, 5), Activity(5, 7), Activity(8, 12), Activity(12, 16)]
        assert (to_set(result) == to_set(expected1) or 
                to_set(result) == to_set(expected2)), f"Big one test failed: {result}"
        #print("‚úì Big one test passed")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    try:
        test_empty()
        test_one_activity()
        test_two_compatibles()
        test_two_overlaps()
        test_two_incompatibles()
        test_three_activities()
        test_four_activities()
        test_five_activities()
        test_big_one()
        #print("\nüéâ All tests passed!")
    except AssertionError as e:
        print(f"\n‚ùå Test failed: {e}")
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")

def compare_algorithms():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∂–∞–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –ø–æ–ª–Ω—ã–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö"""
    print("\n" + "="*50)
    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö:")
    
    test_cases = [
        ([Activity(2, 3)], "–û–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å"),
        ([Activity(3, 4), Activity(2, 3)], "–î–≤–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö"),
        ([Activity(2, 5), Activity(3, 4)], "–î–≤–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è"),
        ([Activity(1, 4), Activity(2, 6), Activity(5, 8)], "–¢—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"),
    ]
    
    for i, (activities, description) in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}: {description}")
        print(f"–ü—Ä–æ—Ü–µ—Å—Å—ã: {activities}")
        
        # –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–º–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
        greedy_time = measure_time(get_max_activities, activities, number=10000)
        result_greedy = get_max_activities(activities)
        
        # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä (–º–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π —Ç.–∫. –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        if len(activities) <= 4:  # –¢–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
            brute_time = measure_time(get_max_activities_brute_force, activities, number=10)
            result_brute = get_max_activities_brute_force(activities)
        else:
            brute_time = float('inf')
            result_brute = "N/A"
        
        print(f"–ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {result_greedy}")
        print(f"–í—Ä–µ–º—è –∂–∞–¥–Ω–æ–≥–æ: {greedy_time:.8f} —Å–µ–∫—É–Ω–¥")
        
        if brute_time != float('inf'):
            print(f"–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä: {result_brute}")
            print(f"–í—Ä–µ–º—è –ø–µ—Ä–µ–±–æ—Ä–∞: {brute_time:.6f} —Å–µ–∫—É–Ω–¥")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {to_set(result_greedy) == to_set(result_brute)}")
            if brute_time > 0:
                speedup = brute_time / greedy_time
                print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f} —Ä–∞–∑")
        else:
            print("–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä: —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞")

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*50)
    print("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö:")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    import random
    
    sizes = [10, 50, 100, 500, 1000]
    
    for size in sizes:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activities = []
        for _ in range(size):
            start = random.randint(0, size * 2)
            finish = start + random.randint(1, 10)
            activities.append(Activity(start, finish))
        
        print(f"\n–†–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞: {size} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∂–∞–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        start_time = time.perf_counter()
        result = get_max_activities(activities)
        end_time = time.perf_counter()
        
        execution_time = end_time - start_time
        print(f"–í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(result)}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.6f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if len(result) > 0:
            sample = result[:3] if len(result) > 3 else result
            print(f"–ü—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {sample}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    run_tests()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    compare_algorithms()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_test()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
    print("\n" + "="*50)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ:")
    activities = [
        Activity(1, 4), Activity(3, 5), Activity(0, 6), Activity(5, 7), 
        Activity(3, 8), Activity(5, 9), Activity(6, 10), Activity(8, 11), 
        Activity(8, 12), Activity(2, 13), Activity(12, 14)
    ]
    
    start_time = time.perf_counter()
    result = get_max_activities(activities)
    end_time = time.perf_counter()
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(activities)}")
    print(f"–í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(result)}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end_time - start_time):.8f} —Å–µ–∫—É–Ω–¥")
    print("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
    for activity in result:
        print(f"  Start: {activity.start}, Finish: {activity.finish}")

if __name__ == "__main__":
    main()
