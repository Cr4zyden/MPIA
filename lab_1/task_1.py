import time
import random
from collections import deque

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ===
def generate_shuffled_sequence(n: int) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ n."""
    seq = list(range(1, n + 1))
    random.shuffle(seq)
    return seq

def generate_random_queries(count: int, max_val: int = 50000) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç k —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    return [random.randint(1, max_val) for _ in range(count)]

# === –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ===
def measure_time(func):
    start = time.perf_counter()
    result = func()
    end = time.perf_counter()
    return result, end - start

# === –û—Å–Ω–æ–≤–Ω–æ–π –±–µ–Ω—á–º–∞—Ä–∫ ===
def main():
    print(" BENCHMARK: ALL DATA STRUCTURES")
    print("=" * 160)

    # –ó–Ω–∞—á–µ–Ω–∏—è N
    N_VALUES = [10, 100, 1000, 10000, 100000]
    SEARCH_COUNT = 500  # k = 500

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'N':<8} {'–°—Ç—Ä—É–∫—Ç—É—Ä–∞':<20} {'append':<20} {'insert':<20} {'–û–±—Ö–æ–¥':<20} {'–ü–æ–∏—Å–∫':<20}")
    print("-" * 160)

    for N in N_VALUES:
        data = generate_shuffled_sequence(N)
        search_queries = generate_random_queries(SEARCH_COUNT)

        # --- 1. vector (list) ---
        container_list = []
        _, append_time_list = measure_time(lambda: container_list.extend(data))

        container_list_insert = []
        _, insert_time_list = measure_time(lambda: [container_list_insert.insert(0, x) for x in data])

        _, traverse_time_list = measure_time(lambda: sum(container_list))

        hits_list = 0
        start_search = time.perf_counter()
        for q in search_queries:
            if q in container_list:
                hits_list += 1
        search_time_list = time.perf_counter() - start_search

        print(f"{N:<8} {'list (vector)':<20} "
              f"{append_time_list:<20.6e} "
              f"{insert_time_list:<20.6e} "
              f"{traverse_time_list:<20.6e} "
              f"{search_time_list:<20.6e}k = {SEARCH_COUNT}")

        # --- 2. list (deque) ‚Äî –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ ---
        container_deque = deque()
        _, append_time_deque = measure_time(lambda: [container_deque.append(x) for x in data])

        container_deque_insert = deque()
        _, insert_time_deque = measure_time(lambda: [container_deque_insert.appendleft(x) for x in data])

        _, traverse_time_deque = measure_time(lambda: sum(container_deque))

        hits_deque = 0
        start_search = time.perf_counter()
        for q in search_queries:
            if q in container_deque:
                hits_deque += 1
        search_time_deque = time.perf_counter() - start_search

        print(f"{N:<8} {'deque (list)':<20} "
              f"{append_time_deque:<20.6e} "
              f"{insert_time_deque:<20.6e} "
              f"{traverse_time_deque:<20.6e} "
              f"{search_time_deque:<20.6e}k = {SEARCH_COUNT}")

        # --- 3. set (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–µ, –Ω–æ —Å O(log n)) ---
        container_set = set()
        _, insert_time_set = measure_time(lambda: [container_set.add(x) for x in data])

        # –î–ª—è set –Ω–µ—Ç "append", —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º insert
        append_time_set = insert_time_set  # —É—Å–ª–æ–≤–Ω–æ

        _, traverse_time_set = measure_time(lambda: sum(container_set))

        hits_set = 0
        start_search = time.perf_counter()
        for q in search_queries:
            if q in container_set:
                hits_set += 1
        search_time_set = time.perf_counter() - start_search

        print(f"{N:<8} {'set':<20} "
              f"{append_time_set:<20.6e} "
              f"{'‚Äî':<20} "
              f"{traverse_time_set:<20.6e} "
              f"{search_time_set:<20.6e}k = {SEARCH_COUNT}")

        # --- 4. unordered_set (dict) ‚Äî —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞ ---
        container_dict = {}
        _, insert_time_dict = measure_time(lambda: [container_dict.setdefault(x, None) for x in data])

        append_time_dict = insert_time_dict  # —É—Å–ª–æ–≤–Ω–æ

        _, traverse_time_dict = measure_time(lambda: sum(container_dict.keys()))

        hits_dict = 0
        start_search = time.perf_counter()
        for q in search_queries:
            if q in container_dict:
                hits_dict += 1
        search_time_dict = time.perf_counter() - start_search

        print(f"{N:<8} {'dict (unordered_set)':<20} "
              f"{append_time_dict:<20.6e} "
              f"{'‚Äî':<20} "
              f"{traverse_time_dict:<20.6e} "
              f"{search_time_dict:<20.6e}k = {SEARCH_COUNT}")

        print()  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É N

    # === –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å ===
    print("=" * 160)
    print("üìå –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ù–û–ô –°–õ–û–ñ–ù–û–°–¢–ò:")
    print()
    print("‚Ä¢ list (vector):")
    print("   - append: O(1) –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ ‚Üí O(N)")
    print("   - insert(0): O(n) ‚Üí O(N¬≤)")
    print("   - –æ–±—Ö–æ–¥: O(N)")
    print("   - –ø–æ–∏—Å–∫: O(N)")
    print()
    print("‚Ä¢ deque (list):")
    print("   - append: O(1)")
    print("   - insert(0): O(1)")
    print("   - –æ–±—Ö–æ–¥: O(N)")
    print("   - –ø–æ–∏—Å–∫: O(N)")
    print()
    print("‚Ä¢ set:")
    print("   - insert: O(log n)")
    print("   - –æ–±—Ö–æ–¥: O(N)")
    print("   - –ø–æ–∏—Å–∫: O(log n)")
    print()
    print("‚Ä¢ dict (unordered_set):")
    print("   - insert: O(1) —Å—Ä–µ–¥–Ω–µ–µ")
    print("   - –æ–±—Ö–æ–¥: O(N)")
    print("   - –ø–æ–∏—Å–∫: O(1) —Å—Ä–µ–¥–Ω–µ–µ")
    print()
    print("–í—ã–≤–æ–¥—ã:")
    print("   - list: append –±—ã—Å—Ç—Ä–æ, insert(0) –º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö N.")
    print("   - deque: insert(0) –∏ append ‚Äî –æ–±–∞ O(1), –Ω–æ –ø–æ–∏—Å–∫ –≤—Å—ë –µ—â—ë O(N).")
    print("   - set: –≤—Å—Ç–∞–≤–∫–∞ –∏ –ø–æ–∏—Å–∫ ‚Äî O(log n), —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ list –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    print("   - dict: –≤—Å—Ç–∞–≤–∫–∞ –∏ –ø–æ–∏—Å–∫ ‚Äî O(1) —Å—Ä–µ–¥–Ω–µ–µ, —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    print("   - –î–ª—è —á–∞—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ set –∏–ª–∏ dict.")

if __name__ == "__main__":
    main()